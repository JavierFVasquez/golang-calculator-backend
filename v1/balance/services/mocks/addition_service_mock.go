// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/JavierFVasquez/golang-calculator-backend/libs/models"
	mock "github.com/stretchr/testify/mock"
)

// MockNewBalanceServiceIF is an autogenerated mock type for the NewBalanceServiceIF type
type MockNewBalanceServiceIF struct {
	mock.Mock
}

type MockNewBalanceServiceIF_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNewBalanceServiceIF) EXPECT() *MockNewBalanceServiceIF_Expecter {
	return &MockNewBalanceServiceIF_Expecter{mock: &_m.Mock}
}

// GetBalance provides a mock function with given fields: ctx
func (_m *MockNewBalanceServiceIF) GetBalance(ctx context.Context) (*models.User, *error) {
	ret := _m.Called(ctx)

	var r0 *models.User
	var r1 *error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.User, *error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) *error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error)
		}
	}

	return r0, r1
}

// MockNewBalanceServiceIF_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type MockNewBalanceServiceIF_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNewBalanceServiceIF_Expecter) GetBalance(ctx interface{}) *MockNewBalanceServiceIF_GetBalance_Call {
	return &MockNewBalanceServiceIF_GetBalance_Call{Call: _e.mock.On("GetBalance", ctx)}
}

func (_c *MockNewBalanceServiceIF_GetBalance_Call) Run(run func(ctx context.Context)) *MockNewBalanceServiceIF_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNewBalanceServiceIF_GetBalance_Call) Return(_a0 *models.User, _a1 *error) *MockNewBalanceServiceIF_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNewBalanceServiceIF_GetBalance_Call) RunAndReturn(run func(context.Context) (*models.User, *error)) *MockNewBalanceServiceIF_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockNewBalanceServiceIF interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockNewBalanceServiceIF creates a new instance of MockNewBalanceServiceIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockNewBalanceServiceIF(t mockConstructorTestingTNewMockNewBalanceServiceIF) *MockNewBalanceServiceIF {
	mock := &MockNewBalanceServiceIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

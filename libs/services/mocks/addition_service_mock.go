// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/JavierFVasquez/truenorth-calculator-backend/libs/models"
	mock "github.com/stretchr/testify/mock"
)

// MockBasicOperationServiceIF is an autogenerated mock type for the BasicOperationServiceIF type
type MockBasicOperationServiceIF struct {
	mock.Mock
}

type MockBasicOperationServiceIF_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBasicOperationServiceIF) EXPECT() *MockBasicOperationServiceIF_Expecter {
	return &MockBasicOperationServiceIF_Expecter{mock: &_m.Mock}
}

// BasicOperation provides a mock function with given fields: ctx, operation
func (_m *MockBasicOperationServiceIF) BasicOperation(ctx context.Context, operation models.Operation) (*models.Record, *error) {
	ret := _m.Called(ctx, operation)

	var r0 *models.Record
	var r1 *error
	if rf, ok := ret.Get(0).(func(context.Context, models.Operation) (*models.Record, *error)); ok {
		return rf(ctx, operation)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Operation) *models.Record); ok {
		r0 = rf(ctx, operation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Operation) *error); ok {
		r1 = rf(ctx, operation)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error)
		}
	}

	return r0, r1
}

// MockBasicOperationServiceIF_BasicOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BasicOperation'
type MockBasicOperationServiceIF_BasicOperation_Call struct {
	*mock.Call
}

// BasicOperation is a helper method to define mock.On call
//   - ctx context.Context
//   - operation models.Operation
func (_e *MockBasicOperationServiceIF_Expecter) BasicOperation(ctx interface{}, operation interface{}) *MockBasicOperationServiceIF_BasicOperation_Call {
	return &MockBasicOperationServiceIF_BasicOperation_Call{Call: _e.mock.On("BasicOperation", ctx, operation)}
}

func (_c *MockBasicOperationServiceIF_BasicOperation_Call) Run(run func(ctx context.Context, operation models.Operation)) *MockBasicOperationServiceIF_BasicOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Operation))
	})
	return _c
}

func (_c *MockBasicOperationServiceIF_BasicOperation_Call) Return(_a0 *models.Record, _a1 *error) *MockBasicOperationServiceIF_BasicOperation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBasicOperationServiceIF_BasicOperation_Call) RunAndReturn(run func(context.Context, models.Operation) (*models.Record, *error)) *MockBasicOperationServiceIF_BasicOperation_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockBasicOperationServiceIF interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBasicOperationServiceIF creates a new instance of MockBasicOperationServiceIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBasicOperationServiceIF(t mockConstructorTestingTNewMockBasicOperationServiceIF) *MockBasicOperationServiceIF {
	mock := &MockBasicOperationServiceIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	auth "firebase.google.com/go/auth"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockFirebaseClientIF is an autogenerated mock type for the FirebaseClientIF type
type MockFirebaseClientIF struct {
	mock.Mock
}

type MockFirebaseClientIF_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFirebaseClientIF) EXPECT() *MockFirebaseClientIF_Expecter {
	return &MockFirebaseClientIF_Expecter{mock: &_m.Mock}
}

// Auth provides a mock function with given fields: ctx, token
func (_m *MockFirebaseClientIF) Auth(ctx context.Context, token string) (*auth.Token, error) {
	ret := _m.Called(ctx, token)

	var r0 *auth.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*auth.Token, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.Token); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFirebaseClientIF_Auth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Auth'
type MockFirebaseClientIF_Auth_Call struct {
	*mock.Call
}

// Auth is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockFirebaseClientIF_Expecter) Auth(ctx interface{}, token interface{}) *MockFirebaseClientIF_Auth_Call {
	return &MockFirebaseClientIF_Auth_Call{Call: _e.mock.On("Auth", ctx, token)}
}

func (_c *MockFirebaseClientIF_Auth_Call) Run(run func(ctx context.Context, token string)) *MockFirebaseClientIF_Auth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFirebaseClientIF_Auth_Call) Return(_a0 *auth.Token, _a1 error) *MockFirebaseClientIF_Auth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFirebaseClientIF_Auth_Call) RunAndReturn(run func(context.Context, string) (*auth.Token, error)) *MockFirebaseClientIF_Auth_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockFirebaseClientIF interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockFirebaseClientIF creates a new instance of MockFirebaseClientIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFirebaseClientIF(t mockConstructorTestingTNewMockFirebaseClientIF) *MockFirebaseClientIF {
	mock := &MockFirebaseClientIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

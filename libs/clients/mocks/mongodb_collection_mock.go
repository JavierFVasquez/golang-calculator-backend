// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockMongoCollectionIF is an autogenerated mock type for the MongoCollectionIF type
type MockMongoCollectionIF struct {
	mock.Mock
}

type MockMongoCollectionIF_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMongoCollectionIF) EXPECT() *MockMongoCollectionIF_Expecter {
	return &MockMongoCollectionIF_Expecter{mock: &_m.Mock}
}

// InsertOne provides a mock function with given fields: ctx, document, opts
func (_m *MockMongoCollectionIF) InsertOne(ctx context.Context, document interface{}, opts ...*options.InsertOneOptions) (*mongo.InsertOneResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, document)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mongo.InsertOneResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.InsertOneOptions) (*mongo.InsertOneResult, error)); ok {
		return rf(ctx, document, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.InsertOneOptions) *mongo.InsertOneResult); ok {
		r0 = rf(ctx, document, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.InsertOneOptions) error); ok {
		r1 = rf(ctx, document, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMongoCollectionIF_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type MockMongoCollectionIF_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - ctx context.Context
//   - document interface{}
//   - opts ...*options.InsertOneOptions
func (_e *MockMongoCollectionIF_Expecter) InsertOne(ctx interface{}, document interface{}, opts ...interface{}) *MockMongoCollectionIF_InsertOne_Call {
	return &MockMongoCollectionIF_InsertOne_Call{Call: _e.mock.On("InsertOne",
		append([]interface{}{ctx, document}, opts...)...)}
}

func (_c *MockMongoCollectionIF_InsertOne_Call) Run(run func(ctx context.Context, document interface{}, opts ...*options.InsertOneOptions)) *MockMongoCollectionIF_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.InsertOneOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.InsertOneOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockMongoCollectionIF_InsertOne_Call) Return(_a0 *mongo.InsertOneResult, _a1 error) *MockMongoCollectionIF_InsertOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMongoCollectionIF_InsertOne_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.InsertOneOptions) (*mongo.InsertOneResult, error)) *MockMongoCollectionIF_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockMongoCollectionIF interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMongoCollectionIF creates a new instance of MockMongoCollectionIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMongoCollectionIF(t mockConstructorTestingTNewMockMongoCollectionIF) *MockMongoCollectionIF {
	mock := &MockMongoCollectionIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
